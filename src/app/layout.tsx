import type { Metadata } from 'next';
import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import '@/styles/index.scss';
import theme from '@/theme';

// Если используете Geist — можно оставить.
// Главное: пробросить его через theme.typography.fontFamily.
// Пример: вариативно подставим CSS-переменную, которую даёт next/font.
import { Geist, Geist_Mono } from 'next/font/google';
const geistSans = Geist({ variable: '--font-geist-sans', subsets: ['latin'] });
const geistMono = Geist_Mono({
    variable: '--font-geist-mono',
    subsets: ['latin'],
});

export const metadata: Metadata = {
    title: 'Create Next App',
    description: 'Generated by create next app',
};

// ВАЖНО: createTheme должен быть в клиентском модуле — см. доку про font optimization.
// Проще всего: вынесите в отдельный файл 'app/theme.tsx' с 'use client'.
// Для краткости показываю внутри файла, но помните про директиву ниже.

export default function RootLayout({
    children,
}: {
    children: React.ReactNode;
}) {
    return (
        <html lang='ru'>
            <body className={`${geistSans.variable} ${geistMono.variable}`}>
                <AppRouterCacheProvider>
                    <ThemeProvider theme={theme}>{children}</ThemeProvider>
                </AppRouterCacheProvider>
            </body>
        </html>
    );
}
